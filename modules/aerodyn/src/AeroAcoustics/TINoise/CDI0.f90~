!-----subroutine---------------------------------------------g.guidati--
! 
subroutine CDI0   (swork, yc1, yc2, d2yc1, d2yc2,n, ng, td, Ad, pi2i,herm1, herm2, herm3, herm4 )
! 
!-----------------------------------------------------------------------
!               
!     franco guidati    IAG
!                       Uni Stuttgart
!
! 
!     scope             calculate the two dimensional influences of 
!                       a doublet with distribution according to  
!                       hermite polynomials  
! 
!.......................................................................
!               declarations
!.......................................................................
      USE TINoiseDDD
      USE TIPrecision

IMPLICIT                        NONE


   ! Local variables.

INTEGER(4)                   :: k,khi,klo,n,ng,nvar,nok,nbad

REAL(DbKi)                   :: n1, n2,CDI0_f,eps,h1,hmin,green
REAL(DbKi)                   :: swork(n+1),ystart(8),Ad(4,4)
REAL(DbKi)                   :: smid, y1cent,y2cent
REAL(DbKi)                   :: d1y1,d1y2,raver,sloc,td(4,4),s,wgtd,y1,y2,r2,pi2i
REAL(DbKi)                   :: herm1,herm2,herm3,herm4
REAL(DbKi)                   :: yc1(n),yc2(n),d2yc1(n),d2yc2(n)

      
EXTERNAL                     :: CDI0_f,rkqs
!.......................................................................
!              
!.......................................................................
      nvar    =  4
      eps     =  1.0D-06
      h1      =  1.0D-01
      hmin    =  0.0d0
!.......................................................................
!               calculate influence by gaussian quadrature
!.......................................................................

      herm1 = 0.0
      herm2 = 0.0
      herm3 = 0.0
      herm4 = 0.0

      smid = (s1 + s2) / 2.0d0
      call SPL_EX  (swork,n+1,smid,khi,klo)
      call SPL_EX1 (swork,yc1,d2yc1,n+1,smid,y1cent,d1y1,khi,klo)
      call SPL_EX1 (swork,yc2,d2yc2,n+1,smid,y2cent,d1y2,khi,klo)

!      write(36,*) y1edg1,y2edg1

      raver = ((x1 - y1cent)**2 + (x2 - y2cent)**2) / (s2-s1)**2


      if(raver.gt.2.0d0) then
!      write(*,*) raver

        do k=1,ng

          sloc = td(k,ng)
          s = (s1 + s2) / 2.0d0 + td(k,ng) * (s2 - s1) / 2.0d0
          wgtd = Ad(k,ng) * (s2 - s1) / 2.0d0
          call SPL_EX  (swork,n+1,s,khi,klo)
          call SPL_EX1 (swork,yc1,d2yc1,n+1,s,y1,d1y1,khi,klo)
          call SPL_EX1 (swork,yc2,d2yc2,n+1,s,y2,d1y2,khi,klo)
          n1 = d1y2
          n2 = -d1y1

!          write(36,*) y1,y2

          r2 = (x1 - y1) ** 2.0d0 + (x2 - y2) ** 2.0d0

          green = pi2i * (n1 * (x1 - y1) + n2 * (x2 - y2)) / r2
          herm1 = herm1 + wgtd * green * 0.25 * (2.0d0 - 3.0d0 * sloc + sloc ** 3.0d0)
          herm2 = herm2 + wgtd * green * 0.25 * (2.0d0 + 3.0d0 * sloc - sloc ** 3.0d0)
          herm3 = herm3 + wgtd * green * 0.25 * ( 1.0d0 - sloc - sloc ** 2.0d0 + sloc ** 3.0d0)
          herm4 = herm4 + wgtd * green * 0.25 * (-1.0d0 - sloc + sloc ** 2.0d0 + sloc ** 3.0d0)

        enddo

      else   
!        write(*,*) 'raver',raver
        ystart(1) = 1.0d-6
        ystart(2) = 1.0d-6
        ystart(3) = 1.0d-6
        ystart(4) = 1.0d-6

        call odeint(ystart,nvar,s1,s2,eps,h1,hmin,nok,nbad,CDI0_f,rkqs)
!	stop

        herm1 = ystart(1) - 1.0d-6
        herm2 = ystart(2) - 1.0d-6
        herm3 = ystart(3) - 1.0d-6
        herm4 = ystart(4) - 1.0d-6

      endif

!.......................................................................
!               end of subroutine
!.......................................................................
      return
!***********************************************************************
      end 


      subroutine CDI0_f(s,y,dydx)
      USE TINoiseGeneric
      USE TINoiseGeo
      USE TINoiseDDD
           USE TIPrecision

IMPLICIT                        NONE


   ! Local variables.

INTEGER(4)                   :: khi,klo

REAL(DbKi)                   :: n1, n2,y(4), dydx(4),green
REAL(DbKi)                   :: s,y1,y2,d1y1,d1y2,r2,sloc


      call SPL_EX  (swork,n+1,s,khi,klo)
!      write(*,*) khi,klo
      call SPL_EX1 (swork,yc1,d2yc1,n+1,s,y1,d1y1,khi,klo)
      call SPL_EX1 (swork,yc2,d2yc2,n+1,s,y2,d1y2,khi,klo)
      n1 = d1y2
      n2 = -d1y1 
!      write(*,*) y1,y2,n1,n2

      r2 = (x1 - y1) ** 2.0d0 + (x2 - y2) ** 2.0d0
      sloc = (2.0d0 * s - s1 - s2) / (s2 - s1)

      green = pi2i * (n1 * (x1 - y1) + n2 * (x2 - y2)) / r2
      dydx(1) = green * 0.25 * (2.0d0 - 3.0d0 * sloc + sloc ** 3.0d0)
      dydx(2) = green * 0.25 * (2.0d0 + 3.0d0 * sloc - sloc ** 3.0d0)
      dydx(3) = green * 0.25 * ( 1.0d0 - sloc - sloc ** 2.0d0 + sloc ** 3.0d0)
      dydx(4) = green * 0.25 * (-1.0d0 - sloc + sloc ** 2.0d0 + sloc ** 3.0d0)
!      dydx(1) = s
!      dydx(2) = s
!      dydx(3) = s
!      dydx(4) = s
      
!      write(*,*) real(s), real(dydx(3)), real(dydx(4))
      return 
      end




